 # This is a basic workflow to help you get started with Actions

name: Pull assets

on:
  schedule:
    - cron: '0/5 * * * *' 
  
  workflow_dispatch:
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Check_latest_version:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      BASE_URL: "https://api.segmentapis.com"
      CONFIG_TAXONOMY_ID: "tp_1zSCBI8im56lQdrSmhplZJKfUzj"
      BUSINESS_TAXONOMY_ID: "tp_1ybAXDkFHogu5SarT9gozVQYu6j"
      STATIC_RULES_ID: "sfnc_hxdpUMFSYO"
      LOOKUP_RULES_ID: "sfnc_TNhNLzGwpl"
      CODE_BASE_ID: "sfnc_CsJWT9QA9V"
      CORE_INGESTION_FUNCTION_ID: "sfnc_eG2vAhui8Y"

    steps:
      - uses: actions/checkout@v2
      
      - name: Initialize env variables and folder structure
        run: |
          echo "TS_CONFIG_TAXONOMY=$(cat ./src/ts/config_taxonomy.txt)" >> $GITHUB_ENV
          echo "TS_BUSINESS_TAXONOMY=$(cat ./src/ts/business_taxonomy.txt)" >> $GITHUB_ENV
          echo "TS_STATIC_RULES=$(cat ./src/ts/static_rules.txt)" >> $GITHUB_ENV
          echo "TS_LOOKUP_RULES=$(cat ./src/ts/lookup_rules.txt)" >> $GITHUB_ENV
          echo "TS_CODE_BASE=$(cat ./src/ts/code_base.txt)" >> $GITHUB_ENV
          
          mkdir tmp
          mkdir tmp/ts
          mkdir tmp/raw
          mkdir tmp/assets
        
      - name: Check latest update timestamp for each asset
        run: |
            LATEST_CONFIG_TAXONOMY=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.CONFIG_TAXONOMY_ID}}" || { exit 1;})
            echo "LATEST_TS_CONFIG_TAXONOMY=$(echo $LATEST_CONFIG_TAXONOMY | jq '.data.trackingPlan.updatedAt')" >> $GITHUB_ENV
            
            LATEST_BUSINESS_TAXONOMY=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.BUSINESS_TAXONOMY_ID}}" || { exit 1;})
            echo "LATEST_TS_BUSINESS_TAXONOMY=$(echo $LATEST_BUSINESS_TAXONOMY | jq '.data.trackingPlan.updatedAt')" >> $GITHUB_ENV
            
            LATEST_STATIC_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.STATIC_RULES_ID}}" || { exit 1;})
            echo $LATEST_STATIC_RULES > ./tmp/raw/static_rules.json 
            echo "LATEST_TS_STATIC_RULES=$(cat ./tmp/raw/static_rules.json | jq '.data.function.deployedAt')" >> $GITHUB_ENV
            (echo $LATEST_STATIC_RULES | jq '{staticRules:.data.function.code}') > ./tmp/assets/static_rules.json            
            
            LATEST_LOOKUP_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.LOOKUP_RULES_ID}}" || { exit 1;})
            echo $LATEST_LOOKUP_RULES > ./tmp/raw/lookup_rules.json 
            echo "LATEST_TS_LOOKUP_RULES=$(cat ./tmp/raw/lookup_rules.json | jq '.data.function.deployedAt')" >> $GITHUB_ENV
            (echo $LATEST_LOOKUP_RULES | jq '{lookupRules:.data.function.code}') > ./tmp/assets/lookup_rules.json
            
            LATEST_CODE_BASE=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.CODE_BASE_ID}}" || { exit 1;})
            echo $LATEST_CODE_BASE > ./tmp/raw/code_base.json 
            echo "LATEST_TS_CODE_BASE=$(cat ./tmp/raw/code_base.json | jq '.data.function.deployedAt')" >> $GITHUB_ENV
            (echo $LATEST_CODE_BASE | jq '{code:.data.function.code}') > ./tmp/assets/code_base.json
            
      - name: Update Config Taxonomy if needed
        if: ${{ env.LATEST_TS_CONFIG_TAXONOMY != env.TS_CONFIG_TAXONOMY }}
        run: |
          COUNTER=1
          NEXT_PAGE_EXISTS=true
          FULL_CURSOR=""
          LIST_FILENAMES=""

          until [ $NEXT_PAGE_EXISTS == false ]
          do
              echo i: $COUNTER
              CONFIG_TAXONOMY_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.CONFIG_TAXONOMY_ID}}/rules?pagination.count=200&$FULL_CURSOR" || { exit 1;})
              RULES_COUNT_IN_RESPONSE=$(echo $CONFIG_TAXONOMY_RULES | jq '.data.rules | length')
              echo "COUNT "$RULES_COUNT_IN_RESPONSE
              if [ $RULES_COUNT_IN_RESPONSE -gt 0 ];
              then
                  TMP_RULES=$(echo $CONFIG_TAXONOMY_RULES | jq '.data.rules')
                  echo $CONFIG_TAXONOMY_RULES > ./tmp/assets/config_taxonomy_rules_$COUNTER.json
                  CURSOR=$(echo $CONFIG_TAXONOMY_RULES | jq -r '.data.pagination.next')
                  FULL_CURSOR="&pagination.cursor=$CURSOR"
                  LIST_FILENAMES+=" ./tmp/assets/config_taxonomy_rules_$COUNTER.json"
              else
                  NEXT_PAGE_EXISTS=false
              fi

              ((COUNTER+=1))
          done

          echo $(jq -s '{ configTaxonomy: map(.data.rules[]) }' $LIST_FILENAMES) > ./tmp/assets/config_taxonomy.json 
          cp ./tmp/assets/config_taxonomy.json ./src/assets/config_taxonomy.json
          echo $LATEST_TS_CONFIG_TAXONOMY > ./src/ts/config_taxonomy.txt
          #echo "1" > ./src/deploy/config_taxonomy
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update Business Taxonomy if needed
        if: ${{ env.LATEST_TS_BUSINESS_TAXONOMY != env.TS_BUSINESS_TAXONOMY }}
        run: |
          COUNTER=1
          NEXT_PAGE_EXISTS=true
          FULL_CURSOR=""
          LIST_FILENAMES=""
          until [ $NEXT_PAGE_EXISTS == false ]
          do
              echo i: $COUNTER
              BUSINESS_TAXONOMY_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.BUSINESS_TAXONOMY_ID}}/rules?pagination.count=200&$FULL_CURSOR" || { exit 1;})
              RULES_COUNT_IN_RESPONSE=$(echo $BUSINESS_TAXONOMY_RULES | jq '.data.rules | length')
              echo "COUNT "$RULES_COUNT_IN_RESPONSE
              if [ $RULES_COUNT_IN_RESPONSE -gt 0 ];
              then
                  TMP_RULES=$(echo $BUSINESS_TAXONOMY_RULES | jq '.data.rules')
                  echo $BUSINESS_TAXONOMY_RULES > ./tmp/assets/business_taxonomy_rules_$COUNTER.json
                  CURSOR=$(echo $BUSINESS_TAXONOMY_RULES | jq -r '.data.pagination.next')
                  FULL_CURSOR="&pagination.cursor=$CURSOR"
                  LIST_FILENAMES+=" ./tmp/assets/business_taxonomy_rules_$COUNTER.json"
              else
                  NEXT_PAGE_EXISTS=false
              fi
              ((COUNTER+=1))
          done
          echo $(jq -s '{ businessTaxonomy: map(.data.rules[]|tostring) }' $LIST_FILENAMES) > ./tmp/assets/business_taxonomy.json 
          cp ./tmp/assets/business_taxonomy.json ./src/assets/business_taxonomy.json
          echo $LATEST_TS_BUSINESS_TAXONOMY > ./src/ts/business_taxonomy.txt
          #echo "1" > ./src/deploy/business_taxonomy
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update Static Rules if needed
        if: ${{ env.LATEST_TS_STATIC_RULES != env.TS_STATIC_RULES }}
        run: |
          cp ./tmp/assets/static_rules.json ./src/assets/static_rules.json
          echo $LATEST_TS_STATIC_RULES > ./src/ts/json_rules.txt
          #echo "1" > ./src/deploy/json_rules
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update Lookup Rules if needed
        if: ${{ env.LATEST_TS_LOOKUP_RULES != env.TS_LOOKUP_RULES }}
        run: |
          cp ./tmp/assets/lookup_rules.json ./src/assets/lookup_rules.json
          echo $LATEST_TS_LOOKUP_RULES > ./src/ts/lookup_rules.txt
          #echo "1" > ./src/deploy/lookup_rules
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update Code Base if needed
        if: ${{ env.LATEST_TS_CODE_BASE != env.TS_CODE_BASE }}
        run: |
          cp ./tmp/assets/code_base.json ./src/assets/code_base.json
          echo $LATEST_TS_CODE_BASE > ./src/ts/code_base.txt
          #echo "1" > ./src/deploy/code_base
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Bundle code and Deploy to Segemnt
        run: |
          LIBRARY=$(jq -s 'reduce .[] as $item({}; . * $item)' ./src/assets/config_taxonomy.json ./src/assets/business_taxonomy.json ./src/assets/static_rules.json ./src/assets/lookup_rules.json)
          FUNCTION_RAW=$(jq '.code' ./src/assets/code_base.json)
          FUNCTION="${FUNCTION_RAW:1:-1}"
          PAYLOAD=$(jq '{functionId: "\(.fn_id)", code: "const library=\(.library);\(.base)"}' <<EOF
          {"fn_id":"${{env.CORE_INGESTION_FUNCTION_ID}}","library": $LIBRARY, "base": "$FUNCTION"}
          EOF) 
          echo $PAYLOAD > payload.json
          (curl --fail --location --request PATCH '${{env.BASE_URL}}/functions/${{env.CORE_INGESTION_FUNCTION_ID}}' --header 'Authorization: Bearer ${{secrets.ACCESS_TOKEN}}' --header 'Content-Type: application/json' -d '@payload.json' || { exit 1;})

      - name: Commit/Push files in the output folder
        if: ${{ env.GIT_PUSH_REQUIRED == 1 }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ./src/
          git commit -m "Update assets"
          git push
      
      
