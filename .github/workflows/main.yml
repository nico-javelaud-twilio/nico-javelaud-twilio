# This is a basic workflow to help you get started with Actions

name: Pull assets

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      BASE_URL: "https://api.segmentapis.com"
      TAXONOMY_CORE_ID: "tp_1wp3VoPyrRCNbl3lJT6PDUCi5rN"
      TAXONOMY_UPDATES_ID: "tp_1ybAXDkFHogu5SarT9gozVQYu6j"
      JSON_RULES_ID: "sfnc_hxdpUMFSYO"
      LOOKUP_RULES_ID: "sfnc_TNhNLzGwpl"

    steps:
      - uses: actions/checkout@v2
      
      - name: Initialize env variables
        run: |
          echo "TS_TAXONOMY_CORE=$(cat ./ts/taxonomy_core.txt)" >> $GITHUB_ENV
          echo "TS_TAXONOMY_UPDATES=$(cat ./ts/taxonomy_updates.txt)" >> $GITHUB_ENV
          echo "TS_JSON_RULES=$(cat ./ts/json_rules.txt)" >> $GITHUB_ENV
          echo "TS_LOOKUP_RULES=$(cat ./ts/lookup_rules.txt)" >> $GITHUB_ENV
        
      - name: Check latest update timestamp for each asset
        run: |
            mkdir tmp
            
            LATEST_TAXONOMY_CORE=$(curl --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.TAXONOMY_CORE_ID}}")
            echo $LATEST_TAXONOMY_CORE >> ./tmp/taxonomy_core.json 
            LATEST_TS_TAXONOMY_CORE=$(cat ./tmp/taxonomy_core.json | jq '.data.trackingPlan.updatedAt')
            if [ LATEST_TS_TAXONOMY_CORE != TS_TAXONOMY_CORE]; then echo "TAXONOMY_CORE_SYNC=true" >> $GITHUB_ENV fi
            
            LATEST_TAXONOMY_UPDATES=$(curl --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.TAXONOMY_UPDATES_ID}}")
            echo $LATEST_TAXONOMY_UPDATES >> ./tmp/taxonomy_updates.json 
            LATEST_TS_TAXONOMY_UPDATES=$(cat ./tmp/taxonomy_updates.json | jq '.data.trackingPlan.updatedAt')
            if [ LATEST_TS_TAXONOMY_UPDATES != TS_TAXONOMY_UPDATES]; then echo "TAXONOMY_UPDATES_SYNC=true" >> $GITHUB_ENV fi

            
            LATEST_JSON_RULES=$(curl --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.JSON_RULES_ID}}")
            echo $LATEST_JSON_RULES >> ./tmp/json_rules.json 
            LATEST_TS_JSON_RULES=$(cat ./tmp/json_rules.json | jq '.data.function.deployedAt')
            if [ LATEST_TS_JSON_RULES != TS_JSON_RULES]; then echo "JSON_RULES_SYNC=true" >> $GITHUB_ENV fi
            
            LATEST_LOOKUP_RULES=$(curl --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.LOOKUP_RULES_ID}}")
            echo $LATEST_LOOKUP_RULES >> ./tmp/lookup_rules.json 
            LATEST_TS_LOOKUP_RULES=$(cat ./tmp/lookup_rules.json | jq '.data.function.deployedAt')
            if [ LATEST_TS_LOOKUP_RULES != TS_LOOKUP_RULES]; then echo "LOOKUP_RULES_SYNC=true" >> $GITHUB_ENV fi
            
      - name: Diff report
        run: |
          cat ./tmp/taxonomy.json
          cat ./output/taxonomy.json
