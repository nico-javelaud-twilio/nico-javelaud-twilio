 # This is a basic workflow to help you get started with Actions

name: Pull assets

on:
  schedule:
    - cron: '0/5 * * * *' 
  
  workflow_dispatch:
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Check_latest_version:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      BASE_URL: "https://api.segmentapis.com"
      TAXONOMY_CORE_ID: "tp_1wp3VoPyrRCNbl3lJT6PDUCi5rN"
      TAXONOMY_UPDATES_ID: "tp_1ybAXDkFHogu5SarT9gozVQYu6j"
      JSON_RULES_ID: "sfnc_hxdpUMFSYO"
      LOOKUP_RULES_ID: "sfnc_TNhNLzGwpl"
      CODE_BASE_ID: ""
      CORE_INGESTION_FUNCTION_ID: "dkZptWMBoYqtawTMcY8RK4"

    steps:
      - uses: actions/checkout@v2
      
      - name: Initialize env variables
        run: |
          echo "TS_TAXONOMY_CORE=$(cat ./src/ts/taxonomy_core.txt)" >> $GITHUB_ENV
          echo "TS_TAXONOMY_UPDATES=$(cat ./src/ts/taxonomy_updates.txt)" >> $GITHUB_ENV
          echo "TS_JSON_RULES=$(cat ./src/ts/json_rules.txt)" >> $GITHUB_ENV
          echo "TS_LOOKUP_RULES=$(cat ./src/ts/lookup_rules.txt)" >> $GITHUB_ENV
        
      - name: Check latest update timestamp for each asset
        run: |
            mkdir tmp
            mkdir tmp/ts
            mkdir tmp/raw
            mkdir tmp/assets
            
            LATEST_TAXONOMY_CORE=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.TAXONOMY_CORE_ID}}" || { exit 1;})
            echo "LATEST_TS_TAXONOMY_CORE=$(echo $LATEST_TAXONOMY_CORE | jq '.data.trackingPlan.updatedAt')" >> $GITHUB_ENV
            
            LATEST_TAXONOMY_UPDATES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.TAXONOMY_UPDATES_ID}}" || { exit 1;})
            echo "LATEST_TS_TAXONOMY_UPDATES=$(echo $LATEST_TAXONOMY_UPDATES | jq '.data.trackingPlan.updatedAt')" >> $GITHUB_ENV
            
            LATEST_JSON_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.JSON_RULES_ID}}" || { exit 1;})
            echo $LATEST_JSON_RULES > ./tmp/raw/json_rules.json 
            echo "LATEST_TS_JSON_RULES=$(cat ./tmp/raw/json_rules.json | jq '.data.function.deployedAt')" >> $GITHUB_ENV
            (echo $LATEST_JSON_RULES | jq '{"staticRules":.data.function.code}') > ./tmp/assets/json_rules.json            
            
            LATEST_LOOKUP_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/functions/${{env.LOOKUP_RULES_ID}}" || { exit 1;})
            echo $LATEST_LOOKUP_RULES > ./tmp/raw/lookup_rules.json 
            echo "LATEST_TS_LOOKUP_RULES=$(cat ./tmp/raw/lookup_rules.json | jq '.data.function.deployedAt')" >> $GITHUB_ENV
            (echo $LATEST_LOOKUP_RULES | jq '{"lookupRules":.data.function.code}') > ./tmp/assets/lookup_rules.json
            
      - name: Update Taxonomy Core if needed
        if: ${{ env.LATEST_TS_TAXONOMY_CORE != env.TS_TAXONOMY_CORE }}
        run: |
          COUNTER=1
          NEXT_PAGE_EXISTS=true
          FULL_CURSOR=""
          LIST_FILENAMES=""

          until [ $NEXT_PAGE_EXISTS == false ]
          do
              echo i: $COUNTER
              TAXONOMY_CORE_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.TAXONOMY_CORE_ID}}/rules?pagination.count=200&$FULL_CURSOR" || { exit 1;})
              RULES_COUNT_IN_RESPONSE=$(echo $TAXONOMY_CORE_RULES | jq '.data.rules | length')
              echo "COUNT "$RULES_COUNT_IN_RESPONSE
              if [ $RULES_COUNT_IN_RESPONSE -gt 0 ];
              then
                  TMP_RULES=$(echo $TAXONOMY_CORE_RULES | jq '.data.rules')
                  echo $TAXONOMY_CORE_RULES > ./tmp/assets/taxonomy_core_rules_$COUNTER.json
                  CURSOR=$(echo $TAXONOMY_CORE_RULES | jq -r '.data.pagination.next')
                  FULL_CURSOR="&pagination.cursor=$CURSOR"
                  LIST_FILENAMES+=" ./tmp/assets/taxonomy_core_rules_$COUNTER.json"
              else
                  NEXT_PAGE_EXISTS=false
              fi

              ((COUNTER+=1))
          done

          echo $(jq -s '{ data: { rules: map(.data.rules[]) }}' $LIST_FILENAMES) > ./tmp/assets/taxonomy_core.json 
          cp ./tmp/assets/taxonomy_core.json ./src/assets/taxonomy_core.json
          echo $LATEST_TS_TAXONOMY_CORE > ./src/ts/taxonomy_core.txt
          echo "1" > ./src/deploy/taxonomy_core
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update Taxonomy Updates if needed
        if: ${{ env.LATEST_TS_TAXONOMY_UPDATES != env.TS_TAXONOMY_UPDATES }}
        run: |
          COUNTER=1
          NEXT_PAGE_EXISTS=true
          FULL_CURSOR=""
          LIST_FILENAMES=""
          until [ $NEXT_PAGE_EXISTS == false ]
          do
              echo i: $COUNTER
              TAXONOMY_UPDATES_RULES=$(curl --fail --location --request GET --header "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" --url "${{env.BASE_URL}}/tracking-plans/${{env.TAXONOMY_UPDATES_ID}}/rules?pagination.count=200&$FULL_CURSOR" || { exit 1;})
              RULES_COUNT_IN_RESPONSE=$(echo $TAXONOMY_UPDATES_RULES | jq '.data.rules | length')
              echo "COUNT "$RULES_COUNT_IN_RESPONSE
              if [ $RULES_COUNT_IN_RESPONSE -gt 0 ];
              then
                  TMP_RULES=$(echo $TAXONOMY_UPDATES_RULES | jq '.data.rules')
                  echo $TAXONOMY_UPDATES_RULES > ./tmp/assets/taxonomy_updates_rules_$COUNTER.json
                  CURSOR=$(echo $TAXONOMY_UPDATES_RULES | jq -r '.data.pagination.next')
                  FULL_CURSOR="&pagination.cursor=$CURSOR"
                  LIST_FILENAMES+=" ./tmp/assets/taxonomy_updates_rules_$COUNTER.json"
              else
                  NEXT_PAGE_EXISTS=false
              fi
              ((COUNTER+=1))
          done
          echo $(jq -s '{ data: { rules: map(.data.rules[]) }}' $LIST_FILENAMES) > ./tmp/assets/taxonomy_updates.json 
          cp ./tmp/assets/taxonomy_updates.json ./src/assets/taxonomy_updates.json
          echo $LATEST_TS_TAXONOMY_UPDATES > ./src/ts/taxonomy_updates.txt
          echo "1" > ./src/deploy/taxonomy_update
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update JSON Rules if needed
        if: ${{ env.LATEST_TS_JSON_RULES != env.TS_JSON_RULES }}
        run: |
          cp ./tmp/assets/json_rules.json ./src/assets/json_rules.json
          echo $LATEST_TS_JSON_RULES > ./src/ts/json_rules.txt
          echo "1" > ./src/deploy/json_rules
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Update Lookup Rules if needed
        if: ${{ env.LATEST_TS_LOOKUP_RULES != env.TS_LOOKUP_RULES }}
        run: |
          cp ./tmp/assets/lookup_rules.json ./src/assets/lookup_rules.json
          echo $LATEST_TS_LOOKUP_RULES > ./src/ts/lookup_rules.txt
          echo "1" > ./src/deploy/lookup_rules
          echo "GIT_PUSH_REQUIRED=1" >> $GITHUB_ENV
          
      - name: Commit/Push files in the output folder
        if: ${{ env.GIT_PUSH_REQUIRED == 1 }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ./src/
          git commit -m "Update assets"
          git push
      
      - name: Bundle code and Deploy to Segemnt
        if: ${{ env.GIT_PUSH_REQUIRED == 1 }}
        run: |
          JSON_STRING=$( jq -n \
            --arg taxonomy_config "$clear
            " \
            --arg taxonomy_business "$OBJECT_NAME" \
            --arg static_rules "$BUCKET_NAME" \
            --arg lookup_rules "$OBJECT_NAME" \
            --arg code_base "$TARGET_LOCATION" \
            '{"functionId": "${{env.CORE_INGESTION_FUNCTION_ID}}", "code": "{}"' )
       
